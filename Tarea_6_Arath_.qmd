---
title: "Tarea 6. Ecuaciones diferenciales ordinarias."
author: "Arath Nava Calleros"
format: 
  html:
    grid: 
      body-width: 1000px
editor: visual
jupyter: python3
---

Packages requeridos:

```{python}
#| code-fold: true

import numpy as np
import matplotlib.pyplot as plt
#Para instalar plotly hay que escribir en la terminal: py -m pip install plotly
import plotly.graph_objects as go
from scipy import integrate
```

# Ejercicio 1

La Ley de Enfriamiento de Newton establece que la tasa de enfriamiento de un objeto es proporcional a la diferencia de temperatura entre el objeto y su entorno. Supongamos que $t$ es el tiempo, $T$ es la temperatura del objeto, y $T_s$ es la temperatura del entorno. La siguiente ecuación diferencial describe la Ley de Newton:

$$
\frac{dT}{dt} = k(T - T_s),
$$

donde $k$ es una constante.

Consideramos una taza de café a 95 °C en una habitación de 18 °C. Se sabe que el café se enfría a una razón de 2 °C/min cuando su temperatura es de 70 °C. Calcula el valor de la constante $k$ y brinda una gráfica de la solución de la ecuación diferencial.

A partir de los datos tenemos que la temperatura del entorno $T_s=18°C$, la cual es considerada constante. Además,

$$
\frac{dT}{dt} = 2°C/min\qquad \text{cuando} \qquad T=70°C
$$ luego,

$$
k = \frac{1}{T-T_s}\frac{dT}{dt}= \frac{1}{70-18}\,2 = -\frac{1}{26}
$$

Por lo tanto, el problema con valor inicial cuya solución se aproximará es el siguiente:

$$
\frac{dT}{dt}=-\frac{1}{26}(T-18)\qquad T(0)=95°C
$$

A continuación se muestra tal aproximación para $t\in[0,200]$, donde se observa que aproximadamente a partir de $t=150$ se alcanza la temperatura de equilibrio (18°C)

```{python}
#| code-fold: true
#| fig-align: 'center'

f= lambda t,y: (-1/26)*(y-18)
t0 = 0
tf = 200
t_values = np.linspace(t0, tf, 1000)

edo_sol= integrate.solve_ivp(f, [t0, tf], [95], t_eval= t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="Temperatura")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 2

Brinda una aproximación de la solución del siguiente problema con valor inicial.

$$
y' = t -ty, \qquad y(1)=0.
$$

```{python}
def dydt(t, y):
    return t - t * y

t_span = (1, 5)
y0 = [0]

t_eval = np.linspace(t_span[0], t_span[1], 100)

sol = solve_ivp(dydt, t_span, y0, t_eval=t_eval)

plt.figure(figsize=(8,5))
plt.plot(sol.t, sol.y[0], label='Aproximación numérica')
plt.xlabel('t')
plt.ylabel('y(t)')
plt.title("Solución aproximada de y' = t - t y, y(1)=0")
plt.legend()
plt.grid(True)
plt.show()
```

# Ejercicio 3

Para la siguiente ecuación diferencial ordinaria de segundo orden con valores iniciales

$$
u''-3u'-1.5 u= 8\,sen(3t), \qquad u(1)=-0.5, u'(1)=1
$$

Escribe el respectivo sistema de ecuaciones diferenciales de primer orden considerando que $v=u'(t)$ (velocidad) y posteriormente brinda la solución del sistema por medio de las funciones $u(t)$ y $v(t)$

Para expresar la ecuación de segundo orden en un sistema de dos ecuaciones diferenciales de primer orden, consideramos la velocidad como $v(t)=u'(t)$, luego, $v'(t)=u''(t)$, al despejar $u''(t)$ y sustituyendo las igualdades descritas tenemos:

$$
v'(t)= u''(t)= 18\,sen(3t)-3u'-1.5u=18\,sen(3t)-3v-1.5u
$$

Luego, el sistema de ecuaciones diferenciales es,

$$
\begin{cases}
u'  = v\\
v'  = 18\,sen(3t)-3v-1.5u
\end{cases}
$$

con las condiciones iniciales $u(1)=0.5$, $v(1)=1$

```{python}
#| code-fold: true

def f(t, U):
  u, v = U
  return[v, 3*v+1.5*u +8*np.sin(3*t)]


t0 = 1
tf = 2
s0 = np.array([-0.5, 1])
t_values = np.linspace(t0, tf, 1000)

edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval= t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="u(t)")
plt.plot(t_values, edo_sol.y[1], label="v(t)")
plt.grid()
plt.legend()
plt.show()
```

<br>

Para cada uno de las ecuaciones diferenciles ordinarias de segundo y tercer orden con valores iniciales de los ejercicios 4 al 18, encuentra el respectivo sistema de primer orden y aproxima la solución, brinda gráficas de cada una de las funciones que resulten del sistema.

# Ejercicio 4

**Oscilador armónico simple**

$$
y'' + 4y = 0,\quad y(0) = 1,\ y'(0) = 0
$$

```{python}
def sistema(t, Y):
    y1, y2 = Y
    dy1dt = y2
    dy2dt = -4 * y1
    return [dy1dt, dy2dt]

Y0 = [1, 0] 

t0, tf = 0, 10
t_eval = np.linspace(t0, tf, 500)

sol = solve_ivp(sistema, [t0, tf], Y0, t_eval=t_eval)

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.title('Solución aproximada del sistema equivalente a $y\'\' + 4y = 0$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```

# Ejercicio 5

**Oscilador amortiguado**

$$
y'' + 0.5y' + 4y = 0,\quad y(0) = 2,\ y'(0) = 0
$$

```{python}
def sistema(t, Y):
    y1, y2 = Y
    dy1dt = y2
    dy2dt = -0.5 * y2 - 4 * y1
    return [dy1dt, dy2dt]

# Condiciones iniciales
Y0 = [2, 0]  # y(0) = 2, y'(0) = 0

# Intervalo de integración
t0, tf = 0, 10
t_eval = np.linspace(t0, tf, 500)

# Resolver el sistema
sol = solve_ivp(sistema, [t0, tf], Y0, t_eval=t_eval)

# Graficar las soluciones y1(t) y y2(t)
plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.title('Solución aproximada del sistema equivalente a $y\'\' + 0.5 y\' + 4 y = 0$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```

# Ejercicio 6

**Oscilador forzado**

$$
y'' + 2y' + y = \cos(t),\quad y(0) = 0,\ y'(0) = 1
$$

```{python}
def sistema(t, Y):
    y1, y2 = Y
    dy1dt = y2
    dy2dt = np.cos(t) - 2 * y2 - y1
    return [dy1dt, dy2dt]

Y0 = [0, 1] 

t0, tf = 0, 10
t_eval = np.linspace(t0, tf, 500)

sol = solve_ivp(sistema, [t0, tf], Y0, t_eval=t_eval)

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.title(r'Solución aproximada del sistema equivalente a $y\'\' + 2 y\' + y = \cos(t)$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```

# Ejercicio 7

**Ecuación no lineal de segundo orden**

$$
y'' = -y^3 + \cos(t),\quad y(0) = 0,\ y'(0) = 0
$$

```{python}
def sistema_nl(t, Y):
    y1, y2 = Y
    dy1dt = y2
    dy2dt = -y1**3 + np.cos(t)
    return [dy1dt, dy2dt]

Y0 = [0, 0]

t0, tf = 0, 20
t_eval = np.linspace(t0, tf, 1000)

sol = solve_ivp(sistema_nl, [t0, tf], Y0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.title('Solución aproximada de $y\'\' = -y^3 + \cos(t)$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```

# Ejercicio 8

**Amortiguamiento cuadrático**

$$
y'' + y'^2 + y = 0,\quad y(0) = 1,\ y'(0) = -1
$$

```{python}
def sistema_nl(t, Y):
    y1, y2 = Y
    dy1dt = y2
    dy2dt = - y2**2 - y1
    return [dy1dt, dy2dt]

Y0 = [1, -1]

t0, tf = 0, 10
t_eval = np.linspace(t0, tf, 500)

sol = solve_ivp(sistema_nl, [t0, tf], Y0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.title(r'Solución aproximada de $y\'\' + (y\')^2 + y = 0$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```

# Ejercicio 9

**Péndulo simple (no lineal)**

$$
\theta'' + \sin(\theta) = 0,\quad \theta(0) = \frac{\pi}{4},\ \theta'(0) = 0
$$

```{python}
def pendulo(t, Y):
    theta, omega = Y
    dtheta_dt = omega
    domega_dt = -np.sin(theta)
    return [dtheta_dt, domega_dt]

theta0 = np.pi / 4
omega0 = 0
Y0 = [theta0, omega0]

t_span = (0, 20)
t_eval = np.linspace(t_span[0], t_span[1], 500)

sol = solve_ivp(pendulo, t_span, Y0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$\theta(t)$ (ángulo)')
plt.plot(sol.t, sol.y[1], label=r"$\theta'(t)$ (velocidad angular)")
plt.title('Solución numérica del péndulo simple: $\theta\'\' + \sin(\theta) = 0$')
plt.xlabel('Tiempo t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```

# Ejercicio 10

**Circuito RLC**

$$
LQ'' + RQ' + \frac{1}{C}Q = V(t),\quad Q(0) = 0,\ Q'(0) = 0,\quad V(t) = \sin(t)
$$

Consideramos la corriente como la derivada de la carga, es decir $I(t)=Q'(t)$, por lo tanto $I'(t)=Q''(t)$, al despejar la segunda derivada de la carga de la ecuación diferencial de segundo orden y al llevar las sustituciones descritas se obtiene el siguiente sistema de primer orden,

$$
\begin{cases}
Q' = I\\
I' = \frac{1}{L} \left( sen(t) - R\, I-\frac{Q}{C} \right)
\end{cases}
$$

con las condiciones iniciales $Q(0)=0, I(0)=0$.

```{python}
#| code-fold: true

def f(t, Q, L, R, C):
  q, i = Q
  return[i, (1/L)*(np.sin(t)-R*i-q/C)]


t0 = 0
tf = 50
s0 = np.array([0, 0])
t_values = np.linspace(t0, tf, 10000)

L = 0.5
R = 2
C = 5

edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval= t_values, args = (L, R, C))

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="Q(t)")
plt.plot(t_values, edo_sol.y[1], label="I(t)")
plt.grid()
plt.legend()
plt.show()
```

Trayectoria

```{python}
#| code-fold: true

plt.figure(figsize=(8,6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 11

**Ecuación de Bessel aproximada**

$$
x^2y'' + xy' + (x^2 - 1)y = 0,\quad y(1) = 0.5,\ y'(1) = -0.1
$$
```{python}
def f(x, Y):
    y, v = Y
    return [v, -(1/x)*v - ((x**2 - 1)/x**2)*y]

t0 = 1
tf = 10000
y0 = [0.5, -0.1]

t_values = np.linspace(t0, tf, 2000)
edo_sol = integrate.solve_ivp(f, [t0, tf], y0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(x)")
plt.plot(t_values, edo_sol.y[1], label="y'(x)")
plt.grid()
plt.legend()
plt.title("Solución y'(x) y y(x) vs x")
plt.xlabel("x")
plt.ylabel("Funciones")
plt.show()

t_values_fase = np.linspace(t0, tf, 1000000)
edo_sol_fase = integrate.solve_ivp(f, [t0, tf], y0, t_eval=t_values_fase)

plt.figure(figsize=(8,6))
plt.plot(edo_sol_fase.y[0], edo_sol_fase.y[1], color='purple', label="Trayectoria fase")
plt.grid()
plt.legend()
plt.title("Trayectoria fase: y'(x) vs y(x)")
plt.xlabel("y(x)")
plt.ylabel("y'(x)")
plt.show()
```


# Ejercicio 12

**No lineal con exponencial**

$$
y'' + y e^y = \sin(t),\quad y(0) = 0,\ y'(0) = 1
$$

```{python}
def sistema(t, Y):
    y, v = Y
    dy_dt = v
    dv_dt = np.sin(t) - y * np.exp(y)
    return [dy_dt, dv_dt]

Y0 = [0, 1]  

t_span = (0, 20)
t_eval = np.linspace(t_span[0], t_span[1], 500)
sol = solve_ivp(sistema, t_span, Y0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.title(r'Solución aproximada de $y\'\' + y e^{y} = \sin(t)$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```


# Ejercicio 13

**Cuerda con fuerza externa**

$$
y'' = -\pi^2 y + \cos(2\pi t),\quad y(0) = 1,\ y'(0) = 0
$$

```{python}
def sistema(t, Y):
    y, v = Y
    dy_dt = v
    dv_dt = - (np.pi**2) * y + np.cos(2 * np.pi * t)
    return [dy_dt, dv_dt]

Y0 = [1, 0]  # y(0) = 1, y'(0) = 0

t_span = (0, 5)
t_eval = np.linspace(t_span[0], t_span[1], 500)

sol = solve_ivp(sistema, t_span, Y0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.title(r'Solución aproximada de $y\'\' = -\pi^2 y + \cos(2\pi t)$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```


# Ejercicio 14

**EDO homogénea de tercer orden**

$$
y''' - 3y'' + 3y' - y = 0,\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = 1
$$

```{python}
def sistema(t, Y):
    y1, y2, y3 = Y
    dy1dt = y2
    dy2dt = y3
    dy3dt = 3*y3 - 3*y2 + y1
    return [dy1dt, dy2dt, dy3dt]


Y0 = [1, 0, 1]
t_span = (0, 10)
t_eval = np.linspace(t_span[0], t_span[1], 500)

sol = solve_ivp(sistema, t_span, Y0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.plot(sol.t, sol.y[2], label=r"$y''(t)$")
plt.title(r'Solución aproximada de $y\'\'\' - 3 y\'\' + 3 y\' - y = 0$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```

# Ejercicio 15

**EDO de tercer orden con término no lineal**

$$
y''' + y^2 = 0,\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = 0
$$

```{python}
def sistema(t, Y):
    y1, y2, y3 = Y
    dy1dt = y2
    dy2dt = y3
    dy3dt = - y1**2
    return [dy1dt, dy2dt, dy3dt]

Y0 = [1, 0, 0]

t_span = (0, 10)
t_eval = np.linspace(t_span[0], t_span[1], 500)

# Resolver el sistema
sol = solve_ivp(sistema, t_span, Y0, t_eval=t_eval, method='RK45')

# Graficar y(t), y'(t) y y''(t)
plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.plot(sol.t, sol.y[2], label=r"$y''(t)$")
plt.title(r'Solución aproximada de $y\'\'\' + y^2 = 0$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```



# Ejercicio 16

**Oscilador cúbico forzado**

$$
y''' + y'' + y^3 = \cos(t),\quad y(0) = 0,\ y'(0) = 1,\ y''(0) = 0
$$

```{python}
#| code-fold: true

def f(t, U):
  u1, u2, u3 = U
  return[u2, u3, np.cos(t)-u3 -u1 ** 3]


t0 = 0
tf = 5
s0 = np.array([0, 1, 0])
t_values = np.linspace(t0, tf, 1000)


edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label ="y(t)")
plt.plot(t_values, edo_sol.y[1], label ="y'(t)")
plt.plot(t_values, edo_sol.y[2], label ="y''(t)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 17

**Ecuación tipo dispersión (Korteweg-de Vries simplificada)**

$$
y''' - 6yy' = 0,\quad y(0) = 2,\ y'(0) = 0,\ y''(0) = -1
$$

```{python}
def sistema(t, Y):
    y1, y2, y3 = Y
    dy1dt = y2
    dy2dt = y3
    dy3dt = 6 * y1 * y2
    return [dy1dt, dy2dt, dy3dt]

Y0 = [2, 0, -1]

t_span = (0, 10)
t_eval = np.linspace(t_span[0], t_span[1], 500)

sol = solve_ivp(sistema, t_span, Y0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.plot(sol.t, sol.y[2], label=r"$y''(t)$")
plt.title(r'Solución aproximada de $y\'\'\' - 6 y y\' = 0$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```


# Ejercicio 18

**Modelo no lineal de conducción**

$$
y''' = -y y'' + y',\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = -1
$$

```{python}
def sistema(t, Y):
    y1, y2, y3 = Y
    dy1dt = y2
    dy2dt = y3
    dy3dt = - y1 * y3 + y2
    return [dy1dt, dy2dt, dy3dt]

Y0 = [1, 0, -1]

t_span = (0, 20)
t_eval = np.linspace(t_span[0], t_span[1], 1000)

sol = solve_ivp(sistema, t_span, Y0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y(t)$')
plt.plot(sol.t, sol.y[1], label=r"$y'(t)$")
plt.plot(sol.t, sol.y[2], label=r"$y''(t)$")
plt.title(r'Solución aproximada de $y^{\prime\prime\prime} = - y y^{\prime\prime} + y^{\prime}$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.legend()
plt.grid(True)
plt.show()
```


# Ejercicio 19

Una persona abre una cuenta bancaria con un saldo inicial de $2000$ dólares. Sea $b(t)$ el saldo en la cuenta en el tiempo t. Así, $b(0) = 2000$. El banco paga intereses a una tasa continua del $5\%$ anual. La persona realiza depósitos en la cuenta a una tasa continua de $s(t)$ dólares por año. Supogamos que $s(0) = 500$ y que $s(t)$ está aumentando a una tasa continua del $4\%$ anual (la persona puede ahorrar más conforme aumenta su ingreso con el tiempo). Brinda el sistema de ecuaciones diferenciales ordinarias y gráfica la solución $b(t)$ y $s(t)$.

```{python}
#| code-fold: true

def f(t, X):
  x, y = X
  return[0.05*x+y, 0.04*y]


t0 = 0
tf = 5
s0 = np.array([2000, 500])
t_values = np.linspace(t0, tf, 1000)


edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label ="b(t)")
plt.plot(t_values, edo_sol.y[1], label ="s(t)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 20

Aproxima la solución del siguiente sistema de ecuaciones diferenciales ordinarias

\begin{eqnarray}
x'(t) & = -6 x - 3 y\\
y'(t) & = -15 x + 6y
\end{eqnarray}

donde $x(0)= 3$ y $y(0)=2$. Grafica cada una de las funciones y la trayectoria.


```{python}
def sistema(t, X):
    x, y = X
    dxdt = -6 * x - 3 * y
    dydt = -15 * x + 6 * y
    return [dxdt, dydt]

X0 = [3, 2]

t_span = (0, 5)
t_eval = np.linspace(t_span[0], t_span[1], 500)

sol = solve_ivp(sistema, t_span, X0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label='x(t)')
plt.plot(sol.t, sol.y[1], label='y(t)')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.title('Solución aproximada de x(t) y y(t)')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(8,6))
plt.plot(sol.y[0], sol.y[1], color='purple')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title('Trayectoria fase: y(t) vs x(t)')
plt.grid(True)
plt.show()
```


# Ejercicio 21

Considera la interacción de dos especies de animales en un hábitat. Considerando que las poblaciones $x(t)$ y $y(t)$ pueden ser modeladas por medio de las ecuaciones

\begin{eqnarray}
x'(t) & = 1.4 x - y\\
y'(t) & = -1.25 x + 3.4y
\end{eqnarray}

donde $x(0)=7$ y $y(0)=3$. Grafica cada una de las funciones que brindan la población de cada especie al tiempo $t$.

```{python}
def sistema(t, X):
    x, y = X
    dxdt = 1.4 * x - y
    dydt = -1.25 * x + 3.4 * y
    return [dxdt, dydt]
X0 = [7, 3]

t_span = (0, 10)  # Puedes ajustar el intervalo según necesidad
t_eval = np.linspace(t_span[0], t_span[1], 500)

sol = solve_ivp(sistema, t_span, X0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label='Población x(t)')
plt.plot(sol.t, sol.y[1], label='Población y(t)')
plt.xlabel('Tiempo t')
plt.ylabel('Población')
plt.title('Dinámica de dos especies en un hábitat')
plt.legend()
plt.grid(True)
plt.show()
```



# Ejercicio 22

Aproxima la solución del siguiente sistema de ecuaciones diferenciales ordinarias,

\begin{eqnarray}
y'_1(t) & = -6.2 +1.1 y_1 - 0.8 y_2\\
y'_2(t) & = -13.8 +2.1 y_1 -1.2 y_2
\end{eqnarray}

con los valores iniciales $y_1(0)=11$, $y_2(0)=4$. Grafica cada una de las funciones y la trayectoria.

<br>

Para cada uno de los sistemas de ecuaciones diferenciales ordinarias no lineales con valor inicial grafica las funciones y las respectivas trayectorias.

```{python}
def sistema(t, Y):
    y1, y2 = Y
    dy1dt = -6.2 + 1.1 * y1 - 0.8 * y2
    dy2dt = -13.8 + 2.1 * y1 - 1.2 * y2
    return [dy1dt, dy2dt]

Y0 = [11, 4]
t_span = (0, 10)
t_eval = np.linspace(t_span[0], t_span[1], 500)
sol = solve_ivp(sistema, t_span, Y0, t_eval=t_eval, method='RK45')

# Graficar y1(t) y y2(t)
plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label=r'$y_1(t)$')
plt.plot(sol.t, sol.y[1], label=r'$y_2(t)$')
plt.xlabel('t')
plt.ylabel('Funciones')
plt.title('Solución aproximada de $y_1(t)$ y $y_2(t)$')
plt.legend()
plt.grid(True)
plt.show()

# Graficar la trayectoria fase: y2 vs y1
plt.figure(figsize=(8,6))
plt.plot(sol.y[0], sol.y[1], color='purple')
plt.xlabel(r'$y_1(t)$')
plt.ylabel(r'$y_2(t)$')
plt.title('Trayectoria fase: $y_2(t)$ vs $y_1(t)$')
plt.grid(True)
plt.show()
```


# Ejercicio 23

**Sistema logístico con depredación**

$$
\begin{cases}
\frac{dx}{dt} = x(1 - x) - xy \\
\frac{dy}{dt} = -y + xy \\
x(0) = 0.9,\quad y(0) = 0.1
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, X):
  x, y = X
  return[x*(1 - x) - x*y, -y +x*y]

t0 = 0
tf = 1000
s0 = np.array([0.9, 0.1])
t_values = np.linspace(t0, tf, 1000)


edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label ="x(t)")
plt.plot(t_values, edo_sol.y[1], label ="y(t)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 24

**Oscilador de Van der Pol**

$$
\begin{cases}
\frac{dx}{dt} = y \\
\frac{dy}{dt} = \mu (1 - x^2)y - x \\
x(0) = 2,\quad y(0) = 0,\quad \mu = 3
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, X, mu):
  x, y = X
  return[y, mu* (1 - x**2)*y - x]


mu = 3
t0 = 0
tf = 30
s0 = np.array([2, 0])
t_values = np.linspace(t0, tf, 5000)


edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values, args= (mu,))

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label ="x(t)")
plt.plot(t_values, edo_sol.y[1], label ="y(t)")
plt.grid()
plt.legend()
plt.show()
```

Órbita

```{python}
#| code-fold: true

val_mu = np.linspace(1, 10, 5)

plt.figure(figsize=(8,6))
for mu in val_mu:
  edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values, args= (mu,))
  plt.plot(edo_sol.y[0], edo_sol.y[1], label = "mu= " + str(mu))
  
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 25

**Sistema de Lotka-Volterra**

$$
\begin{cases}
\frac{dx}{dt} = \alpha x - \beta xy \\
\frac{dy}{dt} = \delta xy - \gamma y \\
x(0) = 10,\quad y(0) = 5,\quad \alpha = 1.5,\ \beta = 1,\ \delta = 1,\ \gamma = 3
\end{cases}
$$

```{python}
def lotka_volterra(t, z, alpha, beta, delta, gamma):
    x, y = z
    dxdt = alpha * x - beta * x * y
    dydt = delta * x * y - gamma * y
    return [dxdt, dydt]

# Parámetros
alpha = 1.5
beta = 1
delta = 1
gamma = 3

z0 = [10, 5]
t_span = (0, 15)
t_eval = np.linspace(t_span[0], t_span[1], 300)
sol = solve_ivp(lotka_volterra, t_span, z0, args=(alpha, beta, delta, gamma), t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label='Población de presa $x(t)$')
plt.plot(sol.t, sol.y[1], label='Población de depredador $y(t)$')
plt.xlabel('Tiempo $t$')
plt.ylabel('Población')
plt.title('Modelo Lotka-Volterra')
plt.legend()
plt.grid(True)
plt.show()
```



# Ejercicio 26

**Interacción no lineal seno-coseno**

$$
\begin{cases}
\frac{dx}{dt} = \sin(y) - x^3 \\
\frac{dy}{dt} = \cos(x) - y^2 \\
x(0) = 1,\quad y(0) = 0
\end{cases}
$$

```{python}
def sistema(t, X):
    x, y = X
    dxdt = np.sin(y) - x**3
    dydt = np.cos(x) - y**2
    return [dxdt, dydt]

X0 = [1, 0]

t_span = (0, 10)
t_eval = np.linspace(t_span[0], t_span[1], 500)

sol = solve_ivp(sistema, t_span, X0, t_eval=t_eval, method='RK45')


plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label='x(t)')
plt.plot(sol.t, sol.y[1], label='y(t)')
plt.xlabel('Tiempo t')
plt.ylabel('Funciones')
plt.title('Solución aproximada del sistema no lineal')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(8,6))
plt.plot(sol.y[0], sol.y[1], color='purple')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title('Trayectoria fase: y(t) vs x(t)')
plt.grid(True)
plt.show()
```


# Ejercicio 27

**FitzHugh-Nagumo (modelo de neurona)**

$$
\begin{cases}
\frac{dv}{dt} = v - \frac{v^3}{3} - w + I \\
\frac{dw}{dt} = 0.08(v + 0.7 - 0.8w) \\
v(0) = -1,\quad w(0) = 1,\quad I = 0.5
\end{cases}
$$

```{python}
def fhn_model(t, Y, I):
    v, w = Y
    dvdt = v - (v**3)/3 - w + I
    dwdt = 0.08 * (v + 0.7 - 0.8 * w)
    return [dvdt, dwdt]

I = 0.5
Y0 = [-1, 1]

t_span = (0, 50)
t_eval = np.linspace(t_span[0], t_span[1], 5000)

sol = solve_ivp(fhn_model, t_span, Y0, args=(I,), t_eval=t_eval, method='RK45')

# Graficar variables v(t) y w(t)
plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label='v(t)')
plt.plot(sol.t, sol.y[1], label='w(t)')
plt.xlabel('Tiempo t')
plt.ylabel('Funciones')
plt.title('Modelo de FitzHugh-Nagumo')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(8,6))
plt.plot(sol.y[0], sol.y[1], color='purple')
plt.xlabel('v(t)')
plt.ylabel('w(t)')
plt.title('Trayectoria fase del modelo FitzHugh-Nagumo')
plt.grid(True)
plt.show()
```


# Ejercicio 28

**Sistema no autónomo**

$$
\begin{cases}
\frac{dx}{dt} = x \sin(t) + y^2 \\
\frac{dy}{dt} = -y \cos(t) + x \\
x(0) = 1,\quad y(0) = -1
\end{cases}
$$

```{python}
def sistema(t, X):
    x, y = X
    dxdt = x * np.sin(t) + y**2
    dydt = -y * np.cos(t) + x
    return [dxdt, dydt]

X0 = [1, -1]

t_span = (0, 10)
t_eval = np.linspace(t_span[0], t_span[1], 500)

sol = solve_ivp(sistema, t_span, X0, t_eval=t_eval, method='RK45')

# Graficar x(t) y y(t)
plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label='x(t)')
plt.plot(sol.t, sol.y[1], label='y(t)')
plt.xlabel('Tiempo t')
plt.ylabel('Funciones')
plt.title('Solución aproximada del sistema')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(8,6))
plt.plot(sol.y[0], sol.y[1], color='purple')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title('Trayectoria fase: y(t) vs x(t)')
plt.grid(True)
plt.show()
```


# Ejercicio 29

**Modelo epidemiológico SIR (en este caso no graficar la trayectoria)**

$$
\begin{cases}
\frac{dS}{dt} = -\beta S I \\
\frac{dI}{dt} = \beta S I - \gamma I \\
\frac{dR}{dt} = \gamma I \\
S(0) = 0.99,\quad I(0) = 0.01,\quad R(0) = 0,\quad \beta = 0.5,\ \gamma = 0.1
\end{cases}
$$
```{python}
def sir_model(t, y, beta, gamma):
    S, I, R = y
    dSdt = -beta * S * I
    dIdt = beta * S * I - gamma * I
    dRdt = gamma * I
    return [dSdt, dIdt, dRdt]

beta = 0.5
gamma = 0.1

y0 = [0.99, 0.01, 0.0]

t_span = (0, 60)
t_eval = np.linspace(t_span[0], t_span[1], 600)

sol = solve_ivp(sir_model, t_span, y0, args=(beta, gamma), t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label='Susceptibles S(t)')
plt.plot(sol.t, sol.y[1], label='Infectados I(t)')
plt.plot(sol.t, sol.y[2], label='Recuperados R(t)')
plt.xlabel('Tiempo (días)')
plt.ylabel('Proporción de población')
plt.title('Modelo SIR de propagación epidémica')
plt.legend()
plt.grid(True)
plt.show()
```



# Ejercicio 30

**Crecimiento logístico cruzado**

$$
\begin{cases}
\frac{dx}{dt} = x(1 - x - 0.5y) \\
\frac{dy}{dt} = y(1 - y - 0.3x) \\
x(0) = 0.5,\quad y(0) = 0.2
\end{cases}
$$

```{python}
def sistema(t, X):
    x, y = X
    dxdt = x * (1 - x - 0.5 * y)
    dydt = y * (1 - y - 0.3 * x)
    return [dxdt, dydt]

X0 = [0.5, 0.2]

t_span = (0, 30)
t_eval = np.linspace(t_span[0], t_span[1], 1000)

sol = solve_ivp(sistema, t_span, X0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label='x(t)')
plt.plot(sol.t, sol.y[1], label='y(t)')
plt.xlabel('Tiempo t')
plt.ylabel('Población')
plt.title('Solución aproximada del sistema no lineal')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(8,6))
plt.plot(sol.y[0], sol.y[1], color='purple')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title('Trayectoria fase: y(t) vs x(t)')
plt.grid(True)
plt.show()
```


# Ejercicio 31

**Movimiento en campo no lineal**

$$
\begin{cases}
\frac{dx}{dt} = y \\
\frac{dy}{dt} = -\sin(x) - 0.5 y \\
x(0) = \pi/2,\quad y(0) = 0
\end{cases}
$$

```{python}
def sistema(t, X):
    x, y = X
    dxdt = y
    dydt = -np.sin(x) - 0.5 * y
    return [dxdt, dydt]

X0 = [np.pi / 2, 0]

t_span = (0, 20)
t_eval = np.linspace(t_span[0], t_span[1], 1000)

sol = solve_ivp(sistema, t_span, X0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label='x(t)')
plt.plot(sol.t, sol.y[1], label='y(t)')
plt.xlabel('Tiempo t')
plt.ylabel('Funciones')
plt.title('Solución aproximada del péndulo amortiguado')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(8,6))
plt.plot(sol.y[0], sol.y[1], color='purple')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title('Trayectoria fase: y(t) vs x(t)')
plt.grid(True)
plt.show()
```


# Ejercicio 32

**Sistema no lineal acoplado**

$$
\begin{cases}
\frac{dx}{dt} = x(1 - x) - xy^2 \\
\frac{dy}{dt} = y(1 - y) - x^2y \\
x(0) = 0.8,\quad y(0) = 0.6
\end{cases}
$$

```{python}
def sistema(t, X):
    x, y = X
    dxdt = x * (1 - x) - x * y**2
    dydt = y * (1 - y) - x**2 * y
    return [dxdt, dydt]

X0 = [0.8, 0.6]

t_span = (0, 30)
t_eval = np.linspace(t_span[0], t_span[1], 1000)

sol = solve_ivp(sistema, t_span, X0, t_eval=t_eval, method='RK45')

plt.figure(figsize=(10,6))
plt.plot(sol.t, sol.y[0], label='x(t)')
plt.plot(sol.t, sol.y[1], label='y(t)')
plt.xlabel('Tiempo t')
plt.ylabel('Población')
plt.title('Solución aproximada del sistema no lineal')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(8,6))
plt.plot(sol.y[0], sol.y[1], color='purple')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title('Trayectoria fase: y(t) vs x(t)')
plt.grid(True)
plt.show()
```

